/* ***************************************************** **
   ch02_pitfalls_of_set_operations.sql
   
   Companion script for Practical Oracle SQL, Apress 2020
   by Kim Berg Hansen, https://www.kibeha.dk
   Use at your own risk
   *****************************************************
   
   Chapter 2
   Pitfalls of Set Operations
   
   To be executed in schema PRACTICAL
** ***************************************************** */

/* -----------------------------------------------------
   sqlcl formatting setup
   ----------------------------------------------------- */

-- Unlike most other chapters, this chapter manually formats
-- columns instead of using sqlformat ansiconsole

set pagesize 80
set linesize 80
set sqlformat
alter session set nls_date_format = 'YYYY-MM-DD';

column c_id          format 99999
column customer_name format a15
column b_id          format 99999
column brewery_name  format a18
column p_id          format 9999
column product_name  format a17
column c_or_b_id     format 99999
column c_or_b_name   format a18
column ordered       format a10
column qty           format 999
column product_coll  format a40
column multiset_coll format a60
column rn            format 9

/* -----------------------------------------------------
   Chapter 2 example code
   ----------------------------------------------------- */

-- Listing 2-2. Data for two customers and their orders

SELECT
   CUSTOMER_ID AS C_ID, CUSTOMER_NAME, ORDERED
 , PRODUCT_ID  AS P_ID, PRODUCT_NAME , QTY
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID IN (50042, 50741)
ORDER BY CUSTOMER_ID, PRODUCT_ID;

-- Listing 2-3. Data for two breweries and the products bought from them

SELECT
   BREWERY_ID AS B_ID, BREWERY_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID IN (518, 523)
ORDER BY BREWERY_ID, PRODUCT_ID;

-- Listing 2-4. Concatenating the results of two queries

SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
UNION ALL
SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523;

-- Listing 2-5. Different columns from the two queries

SELECT
   CUSTOMER_ID AS C_OR_B_ID, CUSTOMER_NAME AS C_OR_B_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
UNION ALL
SELECT
   BREWERY_ID, BREWERY_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523;

-- Attempting to order by a table column leads to ORA-00904: "PRODUCT_ID": invalid identifier

SELECT
   CUSTOMER_ID AS C_OR_B_ID, CUSTOMER_NAME AS C_OR_B_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
UNION ALL
SELECT
   BREWERY_ID, BREWERY_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523
ORDER BY PRODUCT_ID;

-- Ordering by column alias works

SELECT
   CUSTOMER_ID AS C_OR_B_ID, CUSTOMER_NAME AS C_OR_B_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
UNION ALL
SELECT
   BREWERY_ID, BREWERY_NAME
 , PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523
ORDER BY P_ID;

-- Listing 2-6. Union is a true set operation that implicitly performs a distinct of the query result

SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
UNION
SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523
ORDER BY P_ID;

-- Where union is the distinct joined results, intersect is the distinct common results

SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
INTERSECT
SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523
ORDER BY P_ID;

-- Minus is the set subtraction - also known as except

SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
MINUS
SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.BREWERY_PRODUCTS
WHERE BREWERY_ID = 523
ORDER BY P_ID;

-- Listing 2-7. The customer product data viewed as a collection type

SELECT
   CUSTOMER_ID AS C_ID, CUSTOMER_NAME
 , PRODUCT_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ
WHERE CUSTOMER_ID IN (50042, 50741)
ORDER BY CUSTOMER_ID;

-- Listing 2-8. Doing union as a multiset operation on the collections

SELECT
   WHITEHART.PRODUCT_COLL
   MULTISET UNION
   HYGGEHUMLE.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- Multiset union all is the same as multiset union

SELECT
   WHITEHART.PRODUCT_COLL
   MULTISET UNION ALL
   HYGGEHUMLE.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- Multiset union distinct exists too

SELECT
   WHITEHART.PRODUCT_COLL
   MULTISET UNION DISTINCT
   HYGGEHUMLE.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- For multiset an intersect all is possible

SELECT
   WHITEHART.PRODUCT_COLL
   MULTISET INTERSECT ALL
   HYGGEHUMLE.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- As well as an intersect distinct

SELECT
   WHITEHART.PRODUCT_COLL
   MULTISET INTERSECT DISTINCT
   HYGGEHUMLE.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- Naturally there is an except all as well

SELECT
   WHITEHART.PRODUCT_COLL
   MULTISET EXCEPT ALL
   HYGGEHUMLE.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- More interesting results of the reversed except all

SELECT
   HYGGEHUMLE.PRODUCT_COLL
   MULTISET EXCEPT ALL
   WHITEHART.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- Except distinct result shows distinct is performed before set subtraction

SELECT
   HYGGEHUMLE.PRODUCT_COLL
   MULTISET EXCEPT DISTINCT
   WHITEHART.PRODUCT_COLL
      AS MULTISET_COLL
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ WHITEHART
CROSS JOIN PRACTICAL.CUSTOMER_ORDER_PRODUCTS_OBJ HYGGEHUMLE
WHERE WHITEHART.CUSTOMER_ID = 50042
AND HYGGEHUMLE.CUSTOMER_ID = 50741;

-- Listing 2-9. Minus is like multiset except distinct

SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
MINUS
SELECT PRODUCT_ID AS P_ID, PRODUCT_NAME
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50042
ORDER BY P_ID;

-- Listing 2-10. Emulating minus all using multiset except all

SELECT
   MINUS_ALL_TABLE.ID   AS P_ID
 , MINUS_ALL_TABLE.NAME AS PRODUCT_NAME
FROM TABLE(
   CAST(
      MULTISET(
         SELECT PRODUCT_ID, PRODUCT_NAME
         FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
         WHERE CUSTOMER_ID = 50741
      )
      AS ID_NAME_COLL_TYPE
   )
   MULTISET EXCEPT ALL
   CAST(
      MULTISET(
         SELECT PRODUCT_ID, PRODUCT_NAME
         FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
         WHERE CUSTOMER_ID = 50042
      )
      AS ID_NAME_COLL_TYPE
   )
) MINUS_ALL_TABLE
ORDER BY P_ID;

-- Listing 2-11. Emulating minus all using analytic row_number function

SELECT
   PRODUCT_ID AS P_ID
 , PRODUCT_NAME
 , ROW_NUMBER() OVER (
      PARTITION BY PRODUCT_ID, PRODUCT_NAME
      ORDER BY ROWNUM
   ) AS RN
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50741
MINUS
SELECT
   PRODUCT_ID AS P_ID
 , PRODUCT_NAME
 , ROW_NUMBER() OVER (
      PARTITION BY PRODUCT_ID, PRODUCT_NAME
      ORDER BY ROWNUM
   ) AS RN
FROM PRACTICAL.CUSTOMER_ORDER_PRODUCTS
WHERE CUSTOMER_ID = 50042
ORDER BY P_ID;

/* ***************************************************** */
